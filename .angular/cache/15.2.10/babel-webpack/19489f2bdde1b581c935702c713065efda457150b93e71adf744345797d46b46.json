{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@agm/core\";\nimport * as i2 from \"../services/city-data.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction AppComponent_agm_marker_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"agm-marker\", 1);\n  }\n  if (rf & 2) {\n    const marker_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"latitude\", marker_r1.lat)(\"longitude\", marker_r1.lng);\n  }\n}\nexport class AppComponent {\n  constructor(mapsAPILoader, cityDataService) {\n    this.mapsAPILoader = mapsAPILoader;\n    this.cityDataService = cityDataService;\n    this.title = 'My first AGM project';\n    this.lat = 47.36991229592861;\n    this.lng = 8.522110574370004;\n    this.markers = [];\n  }\n  ngOnInit() {\n    this.loadGoogleMapsScript();\n    this.fetchCityData();\n  }\n  loadGoogleMapsScript() {\n    this.mapsAPILoader.load().then(() => {\n      this.initMap();\n    });\n  }\n  initMap() {\n    const directionsService = new google.maps.DirectionsService();\n    const directionsRenderer = new google.maps.DirectionsRenderer();\n    // Safely access the map element or provide a default value (e.g., document.body)\n    const mapElement = document.getElementById('map') || document.body;\n    const map = new google.maps.Map(mapElement, {\n      center: {\n        lat: this.lat,\n        lng: this.lng\n      },\n      zoom: 8\n    });\n    directionsRenderer.setMap(map);\n    // Example route from Sydney, Australia to Melbourne, Australia\n    // const request: google.maps.DirectionsRequest = {\n    //   origin: new google.maps.LatLng(this.lat, this.lng),\n    //   destination: new google.maps.LatLng(47.44159273798436, 8.625458252230352),\n    //   travelMode: 'DRIVING' as google.maps.TravelMode,\n    // };\n    // directionsService.route(request, (result: any, status: any) => {\n    //     if (status === 'OK') {\n    //       directionsRenderer.setDirections(result);\n    //       console.log(result);\n    //     } else {\n    //       console.error('Directions request failed with status:', status);\n    //     }\n    //   });\n  }\n\n  fetchCityData() {\n    this.cityDataService.getCityData().subscribe(data => {\n      if (data && data.cities) {\n        this.processCityData(data.cities);\n      }\n    });\n  }\n  processCityData(cities) {\n    for (const city of cities) {\n      if (city.collecting_points) {\n        for (const collectingPoint of city.collecting_points) {\n          if (collectingPoint.lat && collectingPoint.lng) {\n            this.markers.push({\n              lat: collectingPoint.lat,\n              lng: collectingPoint.lng\n            });\n          }\n        }\n      }\n    }\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MapsAPILoader), i0.ɵɵdirectiveInject(i2.CityDataService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 6,\n    vars: 4,\n    consts: [[\"id\", \"map\"], [3, \"latitude\", \"longitude\"], [3, \"latitude\", \"longitude\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"agm-map\", 1);\n        i0.ɵɵtemplate(4, AppComponent_agm_marker_4_Template, 1, 2, \"agm-marker\", 2);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(5, \"router-outlet\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"latitude\", ctx.lat)(\"longitude\", ctx.lng);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.markers);\n      }\n    },\n    dependencies: [i3.RouterOutlet, i4.NgForOf, i1.AgmMap, i1.AgmMarker],\n    styles: [\"#map[_ngcontent-%COMP%] {\\n        height: 500px; \\n        width: 100%;   \\n        border: 1px solid #ccc; \\n        border-radius: 8px;     \\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); \\n      }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hcHAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O01BRU07UUFDRSxhQUFhLEVBQUUsZ0RBQWdEO1FBQy9ELFdBQVcsSUFBSSw2REFBNkQ7UUFDNUUsc0JBQXNCLEVBQUUsd0NBQXdDO1FBQ2hFLGtCQUFrQixNQUFNLG9EQUFvRDtRQUM1RSx1Q0FBdUMsRUFBRSxzQ0FBc0M7TUFDakYiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuICAgICAgI21hcCB7XG4gICAgICAgIGhlaWdodDogNTAwcHg7IC8qIFNldCB0aGUgZGVzaXJlZCBoZWlnaHQgb2YgdGhlIG1hcCBjb250YWluZXIgKi9cbiAgICAgICAgd2lkdGg6IDEwMCU7ICAgLyogTWFrZSB0aGUgbWFwIGNvbnRhaW5lciB0YWtlIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBwYXJlbnQgKi9cbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsgLyogQWRkIGEgYm9yZGVyIGZvciB2aXN1YWwgZGlzdGluY3Rpb24gKi9cbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4OyAgICAgLyogT3B0aW9uYWw6IEFkZCBib3JkZXItcmFkaXVzIGZvciByb3VuZGVkIGNvcm5lcnMgKi9cbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpOyAvKiBPcHRpb25hbDogQWRkIGEgc3VidGxlIGJveCBzaGFkb3cgKi9cbiAgICAgIH0gICAgICBcbiAgICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;;;IAsBgBA,gCAA8G;;;;IAA9DA,wCAAuB;;;AAOvF,OAAM,MAAOC,YAAY;EAKrBC,YAAoBC,aAA4B,EAASC,eAAgC;IAArE,kBAAa,GAAbD,aAAa;IAAwB,oBAAe,GAAfC,eAAe;IAJxE,UAAK,GAAG,sBAAsB;IAC9B,QAAG,GAAG,iBAAiB;IACvB,QAAG,GAAG,iBAAiB;IACvB,YAAO,GAAU,EAAE;EAInB;EAEAC,QAAQ;IAEJ,IAAI,CAACC,oBAAoB,EAAE;IAC3B,IAAI,CAACC,aAAa,EAAE;EACxB;EAGAD,oBAAoB;IAChB,IAAI,CAACH,aAAa,CAACK,IAAI,EAAE,CAACC,IAAI,CAAC,MAAK;MAClC,IAAI,CAACC,OAAO,EAAE;IAChB,CAAC,CAAC;EACJ;EAEAA,OAAO;IACL,MAAMC,iBAAiB,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,iBAAiB,EAAE;IAC7D,MAAMC,kBAAkB,GAAG,IAAIH,MAAM,CAACC,IAAI,CAACG,kBAAkB,EAAE;IAE/D;IACA,MAAMC,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,IAAID,QAAQ,CAACE,IAAI;IAElE,MAAMC,GAAG,GAAG,IAAIT,MAAM,CAACC,IAAI,CAACS,GAAG,CAACL,UAAU,EAAE;MAC1CM,MAAM,EAAE;QAAEC,GAAG,EAAE,IAAI,CAACA,GAAG;QAAEC,GAAG,EAAE,IAAI,CAACA;MAAG,CAAE;MACxCC,IAAI,EAAE;KACP,CAAC;IAEFX,kBAAkB,CAACY,MAAM,CAACN,GAAG,CAAC;IAE9B;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAd,aAAa;IACX,IAAI,CAACH,eAAe,CAACwB,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MACzD,IAAIA,IAAI,IAAIA,IAAI,CAACC,MAAM,EAAE;QACvB,IAAI,CAACC,eAAe,CAACF,IAAI,CAACC,MAAM,CAAC;;IAErC,CAAC,CAAC;EACJ;EAEAC,eAAe,CAACD,MAAa;IAC3B,KAAK,MAAME,IAAI,IAAIF,MAAM,EAAE;MACzB,IAAIE,IAAI,CAACC,iBAAiB,EAAE;QAC1B,KAAK,MAAMC,eAAe,IAAIF,IAAI,CAACC,iBAAiB,EAAE;UACpD,IAAIC,eAAe,CAACX,GAAG,IAAIW,eAAe,CAACV,GAAG,EAAE;YAC9C,IAAI,CAACW,OAAO,CAACC,IAAI,CAAC;cAChBb,GAAG,EAAEW,eAAe,CAACX,GAAG;cACxBC,GAAG,EAAEU,eAAe,CAACV;aACtB,CAAC;;;;;EAKZ;EAAC;qBA3EMxB,YAAY;EAAA;EAAA;UAAZA,YAAY;IAAAqC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QAVjB1C,0BAAI;QAAAA,YAAW;QAAAA,iBAAK;QACpBA,8BAAc;QAENA,2EAA8G;QAClHA,iBAAU;QAEdA,gCAA+B;;;QAN3BA,eAAW;QAAXA,+BAAW;QAEFA,eAAgB;QAAhBA,kCAAgB;QACUA,eAAe;QAAfA,qCAAe","names":["i0","AppComponent","constructor","mapsAPILoader","cityDataService","ngOnInit","loadGoogleMapsScript","fetchCityData","load","then","initMap","directionsService","google","maps","DirectionsService","directionsRenderer","DirectionsRenderer","mapElement","document","getElementById","body","map","Map","center","lat","lng","zoom","setMap","getCityData","subscribe","data","cities","processCityData","city","collecting_points","collectingPoint","markers","push","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Josip\\Desktop\\App\\client\\src\\app\\components\\app.component.ts"],"sourcesContent":["import { MapsAPILoader } from '@agm/core';\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { CityDataService } from '../services/city-data.service';\nimport { ChangeDetectorRef } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    styles: [`\n\n      #map {\n        height: 500px; /* Set the desired height of the map container */\n        width: 100%;   /* Make the map container take the full width of its parent */\n        border: 1px solid #ccc; /* Add a border for visual distinction */\n        border-radius: 8px;     /* Optional: Add border-radius for rounded corners */\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Optional: Add a subtle box shadow */\n      }      \n    `],\n    template: `\n        <h1>{{ title }}</h1>\n        <div id=\"map\">\n            <agm-map [latitude]=\"lat\" [longitude]=\"lng\">\n                <agm-marker *ngFor=\"let marker of this.markers\" [latitude]=\"marker.lat\" [longitude]=\"marker.lng\"></agm-marker>\n            </agm-map>\n        </div>\n        <router-outlet></router-outlet>\n        \n    `,\n})\nexport class AppComponent {\n    title = 'My first AGM project';\n    lat = 47.36991229592861;\n    lng = 8.522110574370004;\n    markers: any[] = [];\n    constructor(private mapsAPILoader: MapsAPILoader, public cityDataService: CityDataService)\n    {\n\n    }\n\n    ngOnInit()\n    {\n        this.loadGoogleMapsScript();\n        this.fetchCityData();\n    }\n\n\n    loadGoogleMapsScript() {\n        this.mapsAPILoader.load().then(() => {\n          this.initMap();\n        });\n      }\n    \n      initMap() {\n        const directionsService = new google.maps.DirectionsService();\n        const directionsRenderer = new google.maps.DirectionsRenderer();\n    \n        // Safely access the map element or provide a default value (e.g., document.body)\n        const mapElement = document.getElementById('map') || document.body;\n    \n        const map = new google.maps.Map(mapElement, {\n          center: { lat: this.lat, lng: this.lng },\n          zoom: 8\n        });\n    \n        directionsRenderer.setMap(map);\n    \n        // Example route from Sydney, Australia to Melbourne, Australia\n        // const request: google.maps.DirectionsRequest = {\n        //   origin: new google.maps.LatLng(this.lat, this.lng),\n        //   destination: new google.maps.LatLng(47.44159273798436, 8.625458252230352),\n        //   travelMode: 'DRIVING' as google.maps.TravelMode,\n        // };\n    \n        // directionsService.route(request, (result: any, status: any) => {\n        //     if (status === 'OK') {\n        //       directionsRenderer.setDirections(result);\n        //       console.log(result);\n        //     } else {\n        //       console.error('Directions request failed with status:', status);\n        //     }\n        //   });\n      }\n\n      fetchCityData() {\n        this.cityDataService.getCityData().subscribe((data: any) => {\n          if (data && data.cities) {\n            this.processCityData(data.cities);\n          }\n        });\n      }\n\n      processCityData(cities: any[]) {\n        for (const city of cities) {\n          if (city.collecting_points) {\n            for (const collectingPoint of city.collecting_points) {\n              if (collectingPoint.lat && collectingPoint.lng) {\n                this.markers.push({\n                  lat: collectingPoint.lat,\n                  lng: collectingPoint.lng,\n                });\n              }\n            }\n          }\n        }\n      }      \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}